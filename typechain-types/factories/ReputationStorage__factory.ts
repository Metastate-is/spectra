/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  ReputationStorage,
  ReputationStorageInterface,
} from "../ReputationStorage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "fromParticipantId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "toParticipantId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "value",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "markType",
        type: "bytes32",
      },
    ],
    name: "MarkStored",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "fromParticipantId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "toParticipantId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "oldValue",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "newValue",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "markType",
        type: "bytes32",
      },
    ],
    name: "MarkUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "fromParticipantId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "toParticipantId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "markType",
        type: "bytes32",
      },
    ],
    name: "getMark",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "fromParticipantId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "toParticipantId",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "value",
            type: "bool",
          },
          {
            internalType: "bytes32",
            name: "markType",
            type: "bytes32",
          },
        ],
        internalType: "struct ReputationStorage.Mark",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarksCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "markType",
        type: "bytes32",
      },
    ],
    name: "getMarksCountByType",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "marks",
    outputs: [
      {
        internalType: "bytes32",
        name: "fromParticipantId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "toParticipantId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "markType",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "fromParticipantId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "toParticipantId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "markType",
        type: "bytes32",
      },
    ],
    name: "storeOrUpdateMark",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ac1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631f44f6e61461005c57806322f9421a1461008f578063a969e9dd146100bf578063bff4753b146100dd578063c9d7754f1461010d575b600080fd5b61007660048036038101906100719190610644565b610129565b60405161008694939291906106a5565b60405180910390f35b6100a960048036038101906100a49190610716565b610176565b6040516100b691906107dc565b60405180910390f35b6100c76102aa565b6040516100d49190610806565b60405180910390f35b6100f760048036038101906100f29190610821565b6102b6565b6040516101049190610806565b60405180910390f35b6101276004803603810190610122919061087a565b6102d3565b005b6000818154811061013957600080fd5b90600052602060002090600402016000915090508060000154908060010154908060020160009054906101000a900460ff16908060030154905084565b61017e6105d6565b600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16610200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f79061093e565b60405180910390fd5b600060016000868152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000205490506000818154811061024e5761024d61095e565b5b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815250509150509392505050565b60008080549050905090565b600060036000838152602001908152602001600020549050919050565b600260008581526020019081526020016000206000848152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16156104255760006001600086815260200190815260200160002060008581526020019081526020016000206000838152602001908152602001600020549050600080828154811061036a5761036961095e565b5b906000526020600020906004020160020160009054906101000a900460ff16905083600083815481106103a05761039f61095e565b5b906000526020600020906004020160020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1115a06227416c26fcdfe0de5b9360abf1351a9df9982b634852f999382f4633878784888860405161041695949392919061098d565b60405180910390a250506105d0565b600060405180608001604052808681526020018581526020018415158152602001838152509080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550606082015181600301555050600060016000805490506104c79190610a0f565b9050806001600087815260200190815260200160002060008681526020019081526020016000206000848152602001908152602001600020819055506001600260008781526020019081526020016000206000868152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff02191690831515021790555060036000838152602001908152602001600020600081548092919061057590610a43565b91905055503373ffffffffffffffffffffffffffffffffffffffff167fd2635a67ffb23af8612dca8589cfa952cc2b946d53ff19bac8fa7f54318ad9b1868686866040516105c694939291906106a5565b60405180910390a2505b50505050565b60405180608001604052806000801916815260200160008019168152602001600015158152602001600080191681525090565b600080fd5b6000819050919050565b6106218161060e565b811461062c57600080fd5b50565b60008135905061063e81610618565b92915050565b60006020828403121561065a57610659610609565b5b60006106688482850161062f565b91505092915050565b6000819050919050565b61068481610671565b82525050565b60008115159050919050565b61069f8161068a565b82525050565b60006080820190506106ba600083018761067b565b6106c7602083018661067b565b6106d46040830185610696565b6106e1606083018461067b565b95945050505050565b6106f381610671565b81146106fe57600080fd5b50565b600081359050610710816106ea565b92915050565b60008060006060848603121561072f5761072e610609565b5b600061073d86828701610701565b935050602061074e86828701610701565b925050604061075f86828701610701565b9150509250925092565b61077281610671565b82525050565b6107818161068a565b82525050565b60808201600082015161079d6000850182610769565b5060208201516107b06020850182610769565b5060408201516107c36040850182610778565b5060608201516107d66060850182610769565b50505050565b60006080820190506107f16000830184610787565b92915050565b6108008161060e565b82525050565b600060208201905061081b60008301846107f7565b92915050565b60006020828403121561083757610836610609565b5b600061084584828501610701565b91505092915050565b6108578161068a565b811461086257600080fd5b50565b6000813590506108748161084e565b92915050565b6000806000806080858703121561089457610893610609565b5b60006108a287828801610701565b94505060206108b387828801610701565b93505060406108c487828801610865565b92505060606108d587828801610701565b91505092959194509250565b600082825260208201905092915050565b7f4d61726b20646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006109286013836108e1565b9150610933826108f2565b602082019050919050565b600060208201905081810360008301526109578161091b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060a0820190506109a2600083018861067b565b6109af602083018761067b565b6109bc6040830186610696565b6109c96060830185610696565b6109d6608083018461067b565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a1a8261060e565b9150610a258361060e565b9250828203905081811115610a3d57610a3c6109e0565b5b92915050565b6000610a4e8261060e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a8057610a7f6109e0565b5b60018201905091905056fea26469706673582212200b798191b851509686d9f442d6301b55d6c2b9738e62e2dbfe1014ca51325e3964736f6c63430008180033";

type ReputationStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReputationStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReputationStorage__factory extends ContractFactory {
  constructor(...args: ReputationStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ReputationStorage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ReputationStorage__factory {
    return super.connect(runner) as ReputationStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReputationStorageInterface {
    return new Interface(_abi) as ReputationStorageInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ReputationStorage {
    return new Contract(address, _abi, runner) as unknown as ReputationStorage;
  }
}
