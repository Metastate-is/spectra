/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReputationStorage {
  export type MarkStruct = {
    fromParticipantId: BytesLike;
    toParticipantId: BytesLike;
    value: boolean;
    markType: BytesLike;
  };

  export type MarkStructOutput = [
    fromParticipantId: string,
    toParticipantId: string,
    value: boolean,
    markType: string
  ] & {
    fromParticipantId: string;
    toParticipantId: string;
    value: boolean;
    markType: string;
  };
}

export interface ReputationStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMark"
      | "getMarksCount"
      | "getMarksCountByType"
      | "marks"
      | "storeOrUpdateMark"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MarkStored" | "MarkUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getMark",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarksCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarksCountByType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "marks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "storeOrUpdateMark",
    values: [BytesLike, BytesLike, boolean, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getMark", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarksCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarksCountByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeOrUpdateMark",
    data: BytesLike
  ): Result;
}

export namespace MarkStoredEvent {
  export type InputTuple = [
    sender: AddressLike,
    fromParticipantId: BytesLike,
    toParticipantId: BytesLike,
    value: boolean,
    markType: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    fromParticipantId: string,
    toParticipantId: string,
    value: boolean,
    markType: string
  ];
  export interface OutputObject {
    sender: string;
    fromParticipantId: string;
    toParticipantId: string;
    value: boolean;
    markType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarkUpdatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    fromParticipantId: BytesLike,
    toParticipantId: BytesLike,
    oldValue: boolean,
    newValue: boolean,
    markType: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    fromParticipantId: string,
    toParticipantId: string,
    oldValue: boolean,
    newValue: boolean,
    markType: string
  ];
  export interface OutputObject {
    sender: string;
    fromParticipantId: string;
    toParticipantId: string;
    oldValue: boolean;
    newValue: boolean;
    markType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationStorage extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationStorage;
  waitForDeployment(): Promise<this>;

  interface: ReputationStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMark: TypedContractMethod<
    [
      fromParticipantId: BytesLike,
      toParticipantId: BytesLike,
      markType: BytesLike
    ],
    [ReputationStorage.MarkStructOutput],
    "view"
  >;

  getMarksCount: TypedContractMethod<[], [bigint], "view">;

  getMarksCountByType: TypedContractMethod<
    [markType: BytesLike],
    [bigint],
    "view"
  >;

  marks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, string] & {
        fromParticipantId: string;
        toParticipantId: string;
        value: boolean;
        markType: string;
      }
    ],
    "view"
  >;

  storeOrUpdateMark: TypedContractMethod<
    [
      fromParticipantId: BytesLike,
      toParticipantId: BytesLike,
      value: boolean,
      markType: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMark"
  ): TypedContractMethod<
    [
      fromParticipantId: BytesLike,
      toParticipantId: BytesLike,
      markType: BytesLike
    ],
    [ReputationStorage.MarkStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarksCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarksCountByType"
  ): TypedContractMethod<[markType: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "marks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, string] & {
        fromParticipantId: string;
        toParticipantId: string;
        value: boolean;
        markType: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "storeOrUpdateMark"
  ): TypedContractMethod<
    [
      fromParticipantId: BytesLike,
      toParticipantId: BytesLike,
      value: boolean,
      markType: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MarkStored"
  ): TypedContractEvent<
    MarkStoredEvent.InputTuple,
    MarkStoredEvent.OutputTuple,
    MarkStoredEvent.OutputObject
  >;
  getEvent(
    key: "MarkUpdated"
  ): TypedContractEvent<
    MarkUpdatedEvent.InputTuple,
    MarkUpdatedEvent.OutputTuple,
    MarkUpdatedEvent.OutputObject
  >;

  filters: {
    "MarkStored(address,bytes32,bytes32,bool,bytes32)": TypedContractEvent<
      MarkStoredEvent.InputTuple,
      MarkStoredEvent.OutputTuple,
      MarkStoredEvent.OutputObject
    >;
    MarkStored: TypedContractEvent<
      MarkStoredEvent.InputTuple,
      MarkStoredEvent.OutputTuple,
      MarkStoredEvent.OutputObject
    >;

    "MarkUpdated(address,bytes32,bytes32,bool,bool,bytes32)": TypedContractEvent<
      MarkUpdatedEvent.InputTuple,
      MarkUpdatedEvent.OutputTuple,
      MarkUpdatedEvent.OutputObject
    >;
    MarkUpdated: TypedContractEvent<
      MarkUpdatedEvent.InputTuple,
      MarkUpdatedEvent.OutputTuple,
      MarkUpdatedEvent.OutputObject
    >;
  };
}
